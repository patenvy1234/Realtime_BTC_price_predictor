
"""Untitled15.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10bUYHSbVcxaNczvua8ocUg60RHFYXAUE
"""
import nest_asyncio
nest_asyncio.apply()


from sqlalchemy import create_engine

engine = create_engine("postgresql://postgres:Envy2002@localhost/postgres")


def createframe(msg):
  msg = msg['k']
  df = pd.DataFrame([msg])
  df = df.loc[:,['t','o','h','l','c']]
  df.columns = ['time','open','high','low','close']
  df.open = df.open.astype(float)
  df.high = df.high.astype(float)
  df.close = df.close.astype(float)
  df.low = df.low.astype(float)
  df.time = pd.to_datetime(df.time,unit='ms')
  return df

# from model and app.binance import Binanceclient
# from strategies import strategies
# api_key = "BqnDMZRmURy0gK9B4NZQy9boUs1K9kV25QF0VvLR9Qr7cQwVSJ7U4MMA7pXpBpaL"
# api_secret = "ZLAkBrsiVi8mNoSA6qMaqAIXfoAZnUCsvKIstr70oaukckNaCWQjeNzSnwo3u8lS"
import pandas as pd
import sqlalchemy
from binance.client import Client
import asyncio
import json
import websockets
from binance import AsyncClient,BinanceSocketManager

async def main():
    client = await AsyncClient.create()
    bm = BinanceSocketManager(client)
    # start any sockets here, i.e a trade socket
    ts = bm.kline_socket('BTCUSDT')
    # then start receiving messages
    async with ts as tscm:
        while True:
            res = await tscm.recv()
            print(res)
            if res['k']['x'] == True:
                frame = createframe(res)
                frame.to_sql('curren',engine,if_exists='append',index=False)
                print(frame)




#
# async def mylo():
#     client = await AsyncClient.create(api_key,api_secret)
#
#     # start any sockets here, i.e a trade socket
#     order = await client.order_limit_buy(
#         symbol='BNBBTC',
#         quantity=0.003,
#         price='0.012330')

    # then start receiving messages

if __name__ == "__main__":
  loop = asyncio.get_event_loop()
  loop.run_until_complete(main())